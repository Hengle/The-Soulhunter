[gd_scene load_steps=8 format=2]

[ext_resource path="res://Graphics/Enemies/Skeleton.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
resource_name = "Skeleton"
script/source = "extends Enemy

onready var animation = $Animation
onready var sprite = $SpriteContainer

enum {IDLE, WALK, ATTACK}
var state = IDLE
var previous_state = IDLE

var walk = 0
var attac = 0
var delay = 0
var direction = 1

func _ready():
	if Com.register_node(self, \"Enemies/Skeleton\"): return
	
#	init(\"Skeleton\")
	direction = 1 - randi()%2*2

func server_ai(delta):
	#TODO: rzucza tylko gdy gracz w pobliżu, chodzi za wykrytym graczem
	delay -= 1
	
	var radar = 100000
	
	for player in players:
		var dist = player.global_position.distance_squared_to(global_position)
		
		if dist < radar:
			direction = sign(player.global_position.x - global_position.x)
			radar = dist
	
	match state:
		IDLE:
			if delay <= 0 and randi()%200 == 0:
				state = WALK
				walk = 1 - randi()%2*2
				delay = 30
			elif randi()%100 == 0:
				state = ATTACK
	
		WALK:
			if delay <= 0 and randi()%200 == 0:
				state = IDLE
				walk = 0
				delay = 20
		
		ATTACK:
			attac += delta
			
			if attac >= 0.3:
				attac = 0
				state = IDLE ##inaczej
				
				var bone = preload(\"res://Nodes/Enemies/Bone.tscn\").instance()
				bone.position = position + Vector2(0, -80)
				bone.velocity.x = abs(bone.velocity.x) * direction
				get_parent().add_child(bone)

func general_ai(delta):
	sprite.scale.x = -direction
	
	if sprite.position.length_squared() > 1:
		sprite.position *= 0.8
	else:
		sprite.position = Vector2()
	
	if state != previous_state:
		previous_state = state
		
		match state:
			IDLE:
				animation.play(\"Idle\")
			WALK:
				animation.play(\"Walk\")
			ATTACK:
				animation.play(\"Throw\")
	
	move_and_collide(Vector2(walk * 6, 1))

func _on_animation_finished(anim_name): ##potrzebne?
	if anim_name == \"Throw\":
		attac = 0
		animation.play(\"Idle\")

func state_vector_types():
	return [
			Data.TYPE.U16,
			Data.TYPE.U16,
			Data.TYPE.U8,
			Data.TYPE.U8,
			Data.TYPE.U8
		]

func get_state_vector():
	return [
			round(position.x),
			round(position.y),
			state,
			direction+1,
			walk+1
		]

func apply_state_vector(vector):
	var old_position = position
	position.x = vector[0]
	position.y = vector[1]
	if has_meta(\"initialized\"): sprite.position = (old_position - position) + sprite.position
	
	state = vector[2]
	direction = vector[3]-1 ##tutaj jakiś bit, bo marnowanie itp.
	walk = vector[4]-1"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 24, 48 )

[sub_resource type="Animation" id=3]
resource_name = "Bone Walk"
length = 4.0
loop = true
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("SpriteContainer/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2, 3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 5, 6, 7, 6 ]
}

[sub_resource type="Animation" id=4]
length = 4.0
loop = true
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("SpriteContainer/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2, 3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 1 ]
}

[sub_resource type="Animation" id=5]
resource_name = "Throw"
length = 3.0
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("SpriteContainer/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 7, 8, 9 ]
}

[sub_resource type="Animation" id=6]
length = 4.0
loop = true
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("SpriteContainer/Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2, 3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 3, 4, 3 ]
}

[node name="Skeleton" type="KinematicBody2D"]
collision_layer = 0
collision_mask = 3
script = SubResource( 1 )

[node name="SpriteContainer" type="Node2D" parent="."]

[node name="Sprite" type="Sprite" parent="SpriteContainer"]
position = Vector2( -20, 0 )
texture = ExtResource( 1 )
hframes = 10
frame = 7

[node name="Collider" type="CollisionShape2D" parent="."]
position = Vector2( 0, 12 )
shape = SubResource( 2 )

[node name="Hitbox" type="Area2D" parent="."]
input_pickable = false
collision_layer = 4
collision_mask = 0

[node name="TriggerCollider" type="CollisionShape2D" parent="Hitbox"]
position = Vector2( 0, 12 )
shape = SubResource( 2 )

[node name="Animation" type="AnimationPlayer" parent="."]
autoplay = "Idle"
playback_speed = 8.0
"anims/Bone Walk" = SubResource( 3 )
anims/Idle = SubResource( 4 )
anims/Throw = SubResource( 5 )
anims/Walk = SubResource( 6 )

[connection signal="body_entered" from="Hitbox" to="." method="hit"]
[connection signal="body_exited" from="Hitbox" to="." method="unhit"]
[connection signal="animation_finished" from="Animation" to="." method="_on_animation_finished"]

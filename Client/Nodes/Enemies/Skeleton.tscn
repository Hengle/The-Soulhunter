[gd_scene load_steps=9 format=2]

[ext_resource path="res://Graphics/Enemies/Skeleton.png" type="Texture" id=1]
[ext_resource path="res://Scripts/ParentCollider.gd" type="Script" id=2]

[sub_resource type="GDScript" id=1]

resource_name = "Skeleton"
script/source = "extends \"res://Scripts/Enemy.gd\"

onready var bone = load(\"res://Nodes/Projectiles/Bone.tscn\")

var walk = 0
var attac = 0
var delay = 0
var direction = 0

var async = false

func _ready():
	init(\"Skeleton\")
	direction = 1 - randi()%2*2

func _physics_process(delta):
	delay -= 1
	#TODO: rzucza tylko gdy gracz w pobli≈ºu, chodzi za wykrytym graczem
	
	var radar = 100000
	for player in players:
		var dist = player.global_position.distance_squared_to(global_position)
		
		if dist < radar:
			direction = sign(player.global_position.x - global_position.x)
			radar = dist
	
	$Sprite.flip_h = (direction == 1)
	
	if !attac and !walk and server_random(100, \"a\", {\"eq\": 0}) == 0:
		attac = 1
		$Animation.play(\"Throw\")
	elif attac:
		attac += 1
		if attac >= 10:
			attac = 0
			
			if Com.server: 
				var b = bone.instance()
				$\"..\".add_child(b)
				
				b.global_position = global_position + Vector2(0, -80)
				b.velocity.x = abs(b.velocity.x) * direction
				Com.server.sync_to_all(\"e\", b)
	else:
		if !walk and delay <= 0 and (server_random(100, \"w\", {\"eq\": 0}) == 0 or async):
			var dir = server_random(2, \"d\")
			if dir != -1:
				async = false
				walk = 1 - dir*2
				delay = 30
				$Animation.play(\"Walk\")
			else:
				async = true
		elif walk and delay <= 0 and server_random(100, \"s\", {\"eq\": 0}) == 0:
			walk = 0
			delay = 20
			$Animation.play(\"Idle\")
	
	var motion = Vector2(0, 1)
	if walk:
		motion.x = walk * 6
	
	move_and_collide(motion)

func _on_animation_finished(anim_name):
	if anim_name == \"Throw\":
		attac = false
		$Animation.play(\"Idle\")

func get_sync_data():
	return [\"Skeleton\", position, max(delay, 0), attac, direction+1, walk+1]

func sync_data(data):
	var extract = Network.get_data([\"vector2\", \"int\", \"int\", \"int\", \"int\"], data[3], data[2])
	position = extract[0]
	delay = extract[1]
	attac = extract[2]
	direction = extract[3]-1
	walk = extract[4]-1

func print_raw(ary): ##DEBUG
	var arr = []
	for i in range(ary.size()): arr.append(ary[i])
	print(str(arr))"
_sections_unfolded = [ "Resource" ]

[sub_resource type="RectangleShape2D" id=2]

custom_solver_bias = 0.0
extents = Vector2( 48, 48 )

[sub_resource type="Animation" id=3]

resource_name = "Bone Walk"
length = 4.0
loop = true
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2, 3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 5, 6, 7, 6 ]
}

[sub_resource type="Animation" id=4]

length = 4.0
loop = true
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2, 3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 1 ]
}

[sub_resource type="Animation" id=5]

resource_name = "Throw"
length = 3.0
loop = false
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 7, 8, 9 ]
}

[sub_resource type="Animation" id=6]

length = 4.0
loop = true
step = 1.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1, 2, 3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 3, 4, 3 ]
}

[node name="Skeleton" type="KinematicBody2D"]
editor/display_folded = true
input_pickable = false
collision_layer = 1
collision_mask = 0
collision/safe_margin = 0.08
motion/sync_to_physics = false
script = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
texture = ExtResource( 1 )
hframes = 10
frame = 4
_sections_unfolded = [ "Animation", "Region", "Transform" ]
__meta__ = {
"_edit_lock_": true
}

[node name="Collider" type="CollisionShape2D" parent="."]
position = Vector2( 7.94456, 11.7414 )
shape = SubResource( 2 )
__meta__ = {
"_edit_lock_": true
}

[node name="Hitbox" type="Area2D" parent="."]
editor/display_folded = true
position = Vector2( 0, -3 )
input_pickable = false
gravity_vec = Vector2( 0, 1 )
gravity = 98.0
linear_damp = 0.1
angular_damp = 1.0
audio_bus_override = false
audio_bus_name = "Master"
script = ExtResource( 2 )
_sections_unfolded = [ "Collision", "Transform" ]
__meta__ = {
"_edit_lock_": true
}

[node name="TriggerCollider" type="CollisionShape2D" parent="Hitbox"]
position = Vector2( 7.94456, 14.7414 )
shape = SubResource( 2 )

[node name="Animation" type="AnimationPlayer" parent="."]
root_node = NodePath("..")
autoplay = "Idle"
playback_process_mode = 1
playback_default_blend_time = 0.0
playback_speed = 8.0
"anims/Bone Walk" = SubResource( 3 )
anims/Idle = SubResource( 4 )
anims/Throw = SubResource( 5 )
anims/Walk = SubResource( 6 )
blend_times = [  ]
_sections_unfolded = [ "Playback Options" ]

[connection signal="animation_finished" from="Animation" to="." method="_on_animation_finished"]
